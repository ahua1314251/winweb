{"version":3,"sources":["pages/home.js","pages/database.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","React","Component","Database","Header","Layout","Sider","Content","SubMenu","Menu","SiderDemo","state","collapsed","toggle","_this","setState","rootSubmenuKeys","openKeys","onOpenChange","latestOpenKey","find","key","indexOf","layout","react_router_dom","trigger","collapsible","this","className","menu","theme","mode","defaultSelectedKeys","title","icon","type","Item","to","style","background","padding","onClick","id","margin","minHeight","height","react_router","exact","path","component","ReactDOM","render","App_SiderDemo","document","getElementById","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b80d97ec.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Home extends React.Component {\n\n\n    render(){\nreturn (<div> this is home page. </div>)\n    }\n}\n\nexport default Home;","import React from \"react\";\n\nclass Database extends React.Component {\n\n\n    render(){\n             return ( <div> this is database page. </div>)\n\n    }\n\n\n}\nexport default Database;","import './App.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n// 引入React-Router模块\n\nimport {Router, Route, BrowserRouter, NavLink} from 'react-router-dom'\n\n\nimport { Layout, Menu, Icon } from 'antd';\nimport Home from './pages/home';\nimport Database from \"./pages/database\";\n\nconst { Header, Sider, Content } = Layout;\nconst SubMenu = Menu.SubMenu;\nclass SiderDemo extends React.Component {\n    state = {\n        collapsed: false,\n    };\n\n    toggle = () => {\n        this.setState({\n            collapsed: !this.state.collapsed,\n        });\n    }\n\n\n\n    // submenu keys of first level\n    rootSubmenuKeys = ['sub1', 'sub2', 'sub4'];\n\n    state = {\n        openKeys: ['sub1'],\n    };\n\n    onOpenChange = (openKeys) => {\n        const latestOpenKey = openKeys.find(key => this.state.openKeys.indexOf(key) === -1);\n        if (this.rootSubmenuKeys.indexOf(latestOpenKey) === -1) {\n            this.setState({ openKeys });\n        } else {\n            this.setState({\n                openKeys: latestOpenKey ? [latestOpenKey] : [],\n            });\n        }\n    }\n\n\n    render() {\n        return (\n            <Layout>\n                <BrowserRouter  >\n                <Sider\n                    trigger={null}\n                    collapsible\n                    collapsed={this.state.collapsed}\n                >\n                    <div className=\"logo\" />\n\n                    <Menu\n                        theme=\"dark\"\n                        mode=\"inline\"\n                        defaultSelectedKeys={['2']}\n                        openKeys={this.state.openKeys}\n                        onOpenChange={this.onOpenChange}\n\n                    >\n                        <SubMenu key=\"sub1\" title={<span><Icon type=\"mail\" /><span>Navigation One</span></span>}>\n                            <Menu.Item key=\"1\" ><NavLink to ='home'> 工作台 </NavLink></Menu.Item>\n                            <Menu.Item key=\"2\" ><NavLink to ='database'> 数据库展示 </NavLink></Menu.Item>\n                            <Menu.Item key=\"3\" >Option 3</Menu.Item>\n                            <Menu.Item key=\"4\">Option 4</Menu.Item>\n                        </SubMenu>\n                        <SubMenu key=\"sub2\" title={<span><Icon type=\"appstore\" /><span>Navigation Two</span></span>}>\n                            <Menu.Item key=\"5\">Option 5</Menu.Item>\n                            <Menu.Item key=\"6\">Option 6</Menu.Item>\n                            <SubMenu key=\"sub3\" title=\"Submenu\">\n                                <Menu.Item key=\"7\">Option 7</Menu.Item>\n                                <Menu.Item key=\"8\">Option 8</Menu.Item>\n                            </SubMenu>\n                        </SubMenu>\n                        <SubMenu key=\"sub4\" title={<span><Icon type=\"setting\" /><span>Navigation Three</span></span>}>\n                            <Menu.Item key=\"9\">Option 9</Menu.Item>\n                            <Menu.Item key=\"10\">Option 10</Menu.Item>\n                            <Menu.Item key=\"11\">Option 11</Menu.Item>\n                            <Menu.Item key=\"12\">Option 12</Menu.Item>\n                        </SubMenu>\n                    </Menu>\n\n\n\n\n\n\n                </Sider>\n                <Layout>\n                    <Header style={{ background: '#fff', padding: 0 }}>\n                        <Icon\n                            className=\"trigger\"\n                            type={this.state.collapsed ? 'menu-unfold' : 'menu-fold'}\n                            onClick={this.toggle}\n                        />\n                    </Header>\n                    <Content  id=\"content\" style={{\n                        margin: '24px 16px', padding: 24, background: '#fff', minHeight: 280,height:'100%'\n                    }}>\n                        <div>\n                            <switch>\n                                <Route  exact path=\"/\" component={SiderDemo}></Route>\n                                <Route path=\"/home\" component={Home} ></Route>\n                                <Route path=\"/database\" component={Database}></Route>\n                            </switch>\n                        </div>\n                    </Content>\n                </Layout>\n                         </BrowserRouter>\n            </Layout>\n        );\n    }\n}\n\nReactDOM.render(<SiderDemo />, document.getElementById('container'));\n\n// // 配置路由\n// ReactDOM.render(\n//     <BrowserRouter  >\n//\n//         <div>\n//             <switch>\n//             <Route  exact path=\"/\" component={SiderDemo}></Route>\n//             <Route path=\"/home\" component={Home} ></Route>\n//             <Route path=\"/database\" component={Database}></Route>\n//             </switch>\n//         </div>\n//     </BrowserRouter>\n//\n// , document.getElementById('content'));","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root1'));\n\nvar mountNode = document.getElementById('container');\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}